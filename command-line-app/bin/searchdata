#!/usr/bin/env ruby
require 'gli'
require 'httparty'
require './classes/news_fetcher'
begin # XXX: Remove this begin/rescue before distributing your app
require 'searchdata'
# rescue LoadError
#   STDERR.puts "In development, you need to use `bundle exec bin/searchdata` to run your app"
#   STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
#   STDERR.puts "Feel free to remove this message from bin/searchdata now"
#   exit 64
end

class App
  extend GLI::App

  program_desc 'Describe your application here'

  URL = 'http://data-storage-shevyakov.herokuapp.com/news_rest'

  version Searchdata::VERSION

  subcommand_option_handling :normal
  arguments :strict

  desc 'Describe some switch here'
  switch [:s,:switch]

  desc 'Describe some flag here'
  default_value 'the default'
  arg_name 'The name of the argument'
  flag [:f,:flagname]

  news_fetcher = NewsFetcher.new(URL)

  desc 'Describe keyword here'
  arg_name 'keyword', :optional
  command :keyword do |c|
    c.desc 'Describe a switch to keyword'
    c.switch :s

    c.desc 'Describe a flag to keyword'
    c.default_value 'default'
    c.flag :f
    c.action do |global_options,options,args|
      if args[0]
        news_fetcher.set_keyword(args[0])
      end
      news = news_fetcher.get_news()
      puts "\nFound news : \n" + "-" * 30
      news.each do |news_item|
        puts "Title :  #{news_item["title"]}\n\n"
        if news_item["author"]
          puts "Author :  #{news_item["author"]}\n\n"
        end
        puts "Description :  #{news_item["description"]}\n\n"
        puts "*" * 37 + "\n"
        
      end
    end
  end

  pre do |global,command,options,args|
    # Pre logic here
    # Return true to proceed; false to abort and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    true
  end

  post do |global,command,options,args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
  end

  on_error do |exception|
    # Error logic here
    # return false to skip default error handling
    true
  end
end

exit App.run(ARGV)
